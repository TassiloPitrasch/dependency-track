package org.dependencytrack.tasks;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;
import org.dependencytrack.PersistenceCapableTest;
import org.dependencytrack.event.PortfolioVulnerabilityAnalysisEvent;
import org.dependencytrack.event.ProjectMetricsUpdateEvent;
import org.dependencytrack.model.Component;
import org.dependencytrack.model.Project;
import org.dependencytrack.model.ProjectMetrics;
import org.dependencytrack.model.Vulnerability;
import org.dependencytrack.parser.vulndb.VulnDbParser;
import org.dependencytrack.parser.vulndb.model.Results;
import org.dependencytrack.tasks.metrics.ProjectMetricsUpdateTask;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.jupiter.api.Assertions.fail;

import alpine.event.framework.EventService;

public class VulnerabilityAnalysisTaskTest extends PersistenceCapableTest {
    private List<?> resultList;

    @Before
    public void registerEvents() {
        EventService.getInstance().subscribe(ProjectMetricsUpdateEvent.class, ProjectMetricsUpdateTask.class);
    }

    @Before
    public void setUp() throws Exception {
        String filePath = "src/test/resources/unit/vulndb.jsons/vulnerabilities_0.json";
        File file = new File(filePath);
        final VulnDbParser parser = new VulnDbParser();
        try {
        final Results<Vulnerability> results = parser.parse(file, org.dependencytrack.parser.vulndb.model.Vulnerability.class);
        resultList = results.getResults();
        } catch (IOException ex) {
            fail("Failed to parse file: " + ex.getMessage());
        }
    }

    @After
    public void unregisterEvents() {
        EventService.getInstance().unsubscribe(ProjectMetricsUpdateTask.class);
    }

    @Test
    public void testPortfolioVulnerabilityAnalysis() {
        final Project projectA = qm.createProject("Project A", null, "1.0", null, null, null, Project.EnhancedStatus.IN_DEVELOPMENT, false);
        var componentA = new Component();
        componentA.setProject(projectA);
        componentA.setName("Component A");
        componentA = qm.createComponent(componentA, false);

        final Project projectB = qm.createProject("Project B", null, "1.0", null, null, null, Project.EnhancedStatus.IN_DEVELOPMENT, false);
        var componentB = new Component();
        componentB.setProject(projectB);
        componentB.setName("Component B");
        componentB = qm.createComponent(componentB, false);

        List<Project> projects = Arrays.asList(projectA, projectB);

        for (Project project : projects) {
            ProjectMetrics projectMetrics = qm.getMostRecentProjectMetrics(project);
            assertThat(projectMetrics).isNull();
        }

        VulnerabilityAnalysisTask task = new VulnerabilityAnalysisTask();
        task.inform(new PortfolioVulnerabilityAnalysisEvent());

        await("Metrics are updated")
                .atMost(Duration.ofSeconds(5))
                .untilAsserted(() -> {
                    for (Project project : projects) {
                        ProjectMetrics projectMetrics = qm.getMostRecentProjectMetrics(project);
                        assertThat(projectMetrics).isNotNull();
                    }
                });

    }

}
